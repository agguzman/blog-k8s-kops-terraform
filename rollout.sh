#!/bin/bash
set -x

# Declare the environment
ENV="$1"

# Make sure to be in this directory
cd ./terraform

# (Note. This terraform init and the next one after 
# regen-cluster are different)
terraform init

# Immediately check terraform files.
# We don't need to check the tf in kubernetes-cluster/$ENV
# because those are generated by kops
terraform validate
if [ $? -ne 0 ]; then
    echo "terraform validate failed"; exit 1 
fi

# Configure state by selecting workspace.
# Since we're reusing modules we'll use workspaces to 
# islote state.
terraform workspace new $ENV
terraform workspace select $ENV

# Apply the config. This creates the k8s base 
# infrastructure that will support the cluster
# We auto approve this because at this point the 
# script is running in CI and we have already modified
# the human readable HCL, there is no need to read 
# the output of terraform and all the details about
# what it's going to apply.
set -ex
terraform apply -auto-approve -var "env=$ENV"
set -x
# # We cannot go on if there are errors in terraform base resources
# if [ $status -ne 0 ]; then
#     echo "terraform command failed"; exit $status
# fi

TF_OUTPUT=$(cd ../terraform && terraform output -json)

# Be sure to be in the different directory when applying different 
# terraform to not step on each others state.
cd ../kubernetes-cluster
./regen-cluster.sh "$TF_OUTPUT"

# Here we don't need to create a workspace because the env 
# directory separates the config to apply. Or do we??
cd $ENV
terraform init
# terraform workspace new $ENV
# terraform workspace select $ENV
terraform apply

# Question, do we need to stop here to check?.. since kops 
# generated the terraform. Would we want to make sure the output is correct?